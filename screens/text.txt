//@refresh reset
import "react-native-get-random-values";
import React, { useCallback, useState } from "react";
import { SafeAreaView } from "react-native-safe-area-context";
import { auth, db } from "../firebase";
import { useRoute } from "@react-navigation/native";
import styled from "styled-components/native";
import { v4 as uuidv4 } from 'uuid';
import {
  addDoc,
  collection,
  doc,
  onSnapshot,
  setDoc,
  updateDoc,
} from "firebase/firestore";
import { useEffect } from "react";
import { GiftedChat } from "react-native-gifted-chat";
const randomId = uuidv4();


export default function Chat() {

  const [roomHash, setRoomHash] = useState("");
  const [messages, setMessages] = useState([]);
  const { currentUser } = auth;
  const route = useRoute();
  const room = route?.params?.room;
  const selectedImage = route?.params?.image;
  const userB = route.params.user;
  const senderUser = currentUser.photoURL
    ? {
        name: currentUser.displayName,
        _id: currentUser.uid,
        avatar: currentUser.photoURL,
      }
    : { name: currentUser.displayName, _id: currentUser.uid };

  const roomId = room ? room.id : randomId;

  const roomRef = doc(db, "rooms", roomId);
  const roomMessagesRef = collection(db, "rooms", roomId, "messages");

  useEffect(() => {
    (async () => {
      if (!room) {
        const currUserData = {
          displayName: currentUser.displayName,
          email: currentUser.email,
        };
        if (currentUser.photoURL) {
          currUserData.photoURL = currentUser.photoURL;
        }
        const userBData = {
          displayName: userB.displayName || userB.contactName || "",
          email: userB.email,
        };
        if (userB.photoURL) {
          userBData.photoURL = userB.photoURL;
        }

        const roomData = {
          participants: [currUserData, userBData],
          participantsArray: [currentUser.email, userB.email],
        };
        try {
          await setDoc(roomRef, roomData);
        } catch (error) {
          console.log(error);
        }
      }
      const emailHash = `${currentUser.email}:${userB.email}`;
      setRoomHash(emailHash);
    })();
  }, []);

  useEffect(() => {
    const unsubscribe = onSnapshot(roomMessagesRef, (querySnapshot) => {
      const messages = querySnapshot
        .docChanges()
        .filter(({ type }) => type === "added")
        .map(({ doc }) => {
          const message = doc.data();
          return {
            ...message,
            createdAt: message.createdAt.toDate(),
          };
        });
      appendMessages(messages);
    });
    return () => unsubscribe();
  }, []);



  const appendMessages = useCallback(
    (messages) => {
      setMessages((previousMessages) => [...previousMessages, ...messages]);
    },
    []
  );
  
  

  async function onSend(messages) {
   try{
    const writes = messages.map(m => addDoc(roomMessagesRef, m));
    const lastMessage = messages[messages.length - 1];
    writes.push(updateDoc(roomRef, { lastMessage }));
    await Promise.all(writes);
   }catch(error){
       console.log(error);
   }
  }

  return (
    <SafeAreaView>
      <Container>
        <GiftedChat
          onSend={onSend}
          messages={messages}
          user={senderUser}
          renderAvatar={null}
        />
      </Container>
    </SafeAreaView>
  );
}


const Container = styled.View`
height: 100%;
width: 100%;
background-color: #fff;


`


